{
 "metadata": {
  "name": "",
  "signature": "sha256:a11be35d0a05fe4435250b4c1ba5c79f0b5707c903d2ef11c04415ddbea13745"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# For my project, I am analyzing data from the show Shark Tank.\n",
      "# The premise of the show is that an entrepreneur or group of entrepreneurs will pitch their service or product to the sharks...\n",
      "# ...a group of successful businessmen and women.\n",
      "# The entrepreneurs ask for money for their business in exchange for share of their company.\n",
      "# I want to predict which business will receive a deal from the sharks\n",
      "\n",
      "\n",
      "\n",
      "import pandas as pd\n",
      "import numpy as np\n",
      "import matplotlib.pyplot as plt\n",
      "\n",
      "%matplotlib inline\n",
      "\n",
      "pd.set_option('display.width', 500)\n",
      "pd.set_option('display.max_columns', 100)\n",
      "\n",
      "def remove_border(axes=None, top=False, right=False, left=True, bottom=True):\n",
      "    ax = axes or plt.gca()\n",
      "    ax.spines['top'].set_visible(top)\n",
      "    ax.spines['right'].set_visible(right)\n",
      "    ax.spines['left'].set_visible(left)\n",
      "    ax.spines['bottom'].set_visible(bottom)\n",
      "    ax.yaxis.set_ticks_position('none')\n",
      "    ax.xaxis.set_ticks_position('none')\n",
      "    if top:\n",
      "        ax.xaxis.tick_top()\n",
      "    if bottom:\n",
      "        ax.xaxis.tick_bottom()\n",
      "    if left:\n",
      "        ax.yaxis.tick_left()\n",
      "    if right:\n",
      "        ax.yaxis.tick_right()\n",
      "        \n",
      "data = pd.read_csv('/Users/kellydavies/Documents/DataScience/Project/Shark_tank_data2.csv')\n",
      "\n",
      "print \"Number of rows: %i\" % data.shape[0]\n",
      "data.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Number of rows: 68\n"
       ]
      },
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Season</th>\n",
        "      <th>Episode</th>\n",
        "      <th>Company</th>\n",
        "      <th>CompanyGenre</th>\n",
        "      <th>NoEntrepreneurs</th>\n",
        "      <th>TeamMembersGender</th>\n",
        "      <th>MoneyAsk</th>\n",
        "      <th>StakeAsk</th>\n",
        "      <th>DealOffered</th>\n",
        "      <th>Deal accepted (Y/N)</th>\n",
        "      <th>Stake offered/accepted (%)</th>\n",
        "      <th>O-Barbara Corcoran</th>\n",
        "      <th>O-Daymond John</th>\n",
        "      <th>O-Robert Herjavec</th>\n",
        "      <th>O-Kevin O'Leary</th>\n",
        "      <th>O-Kevin Harrington</th>\n",
        "      <th>A-Barbara Corcoran</th>\n",
        "      <th>A-Daymond John</th>\n",
        "      <th>A-Robert Herjavec</th>\n",
        "      <th>A- Kevin O-Leary</th>\n",
        "      <th>A- Kevin Harrington</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td>       Mr. Tod's Pie Factory</td>\n",
        "      <td>    Food</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td>  460000</td>\n",
        "      <td> 10</td>\n",
        "      <td> 1</td>\n",
        "      <td>  1</td>\n",
        "      <td>  50</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>  1</td>\n",
        "      <td>  1</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td>               The Ionic Ear</td>\n",
        "      <td>    Tech</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1000000</td>\n",
        "      <td> 15</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td>                     WiSpots</td>\n",
        "      <td>    Tech</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1200000</td>\n",
        "      <td> 10</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td>           Emmy The Elephant</td>\n",
        "      <td>  Health</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td>   50000</td>\n",
        "      <td> 15</td>\n",
        "      <td> 1</td>\n",
        "      <td>  1</td>\n",
        "      <td>  55</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>  1</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td> College Foxes Packing Boxes</td>\n",
        "      <td> Service</td>\n",
        "      <td> 2</td>\n",
        "      <td> 0</td>\n",
        "      <td>  250000</td>\n",
        "      <td> 25</td>\n",
        "      <td> 1</td>\n",
        "      <td>  0</td>\n",
        "      <td>  50</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>  1</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "   Season  Episode                      Company CompanyGenre  NoEntrepreneurs  TeamMembersGender  MoneyAsk  StakeAsk  DealOffered  Deal accepted (Y/N) Stake offered/accepted (%)  O-Barbara Corcoran  O-Daymond John  O-Robert Herjavec  O-Kevin O'Leary  O-Kevin Harrington  A-Barbara Corcoran  A-Daymond John  A-Robert Herjavec  A- Kevin O-Leary  A- Kevin Harrington\n",
        "0       1      101        Mr. Tod's Pie Factory         Food                1                  0    460000        10            1                    1                         50                   1               1                  0              NaN                 NaN                   1               1                NaN               NaN                  NaN\n",
        "1       1      101                The Ionic Ear         Tech                1                  0   1000000        15            0                  NaN                        NaN                   0               0                  0              NaN                 NaN                 NaN             NaN                NaN               NaN                  NaN\n",
        "2       1      101                      WiSpots         Tech                1                  0   1200000        10            0                  NaN                        NaN                   0               0                  0              NaN                 NaN                 NaN             NaN                NaN               NaN                  NaN\n",
        "3       1      101            Emmy The Elephant       Health                1                  1     50000        15            1                    1                         55                   1               0                  0              NaN                 NaN                   1             NaN                NaN               NaN                  NaN\n",
        "4       1      101  College Foxes Packing Boxes      Service                2                  0    250000        25            1                    0                         50                   0               0                  1              NaN                 NaN                 NaN             NaN                  1               NaN                  NaN"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Season</th>\n",
        "      <th>Episode</th>\n",
        "      <th>NoEntrepreneurs</th>\n",
        "      <th>TeamMembersGender</th>\n",
        "      <th>MoneyAsk</th>\n",
        "      <th>StakeAsk</th>\n",
        "      <th>DealOffered</th>\n",
        "      <th>Deal accepted (Y/N)</th>\n",
        "      <th>O-Barbara Corcoran</th>\n",
        "      <th>O-Daymond John</th>\n",
        "      <th>O-Robert Herjavec</th>\n",
        "      <th>O-Kevin O'Leary</th>\n",
        "      <th>O-Kevin Harrington</th>\n",
        "      <th>A-Barbara Corcoran</th>\n",
        "      <th>A-Daymond John</th>\n",
        "      <th>A-Robert Herjavec</th>\n",
        "      <th>A- Kevin O-Leary</th>\n",
        "      <th>A- Kevin Harrington</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>count</th>\n",
        "      <td> 68</td>\n",
        "      <td>  68.000000</td>\n",
        "      <td> 68.000000</td>\n",
        "      <td> 68.000000</td>\n",
        "      <td>      68.000000</td>\n",
        "      <td> 68.000000</td>\n",
        "      <td> 68.000000</td>\n",
        "      <td> 35.000000</td>\n",
        "      <td> 68.000000</td>\n",
        "      <td> 68.000000</td>\n",
        "      <td> 68.000000</td>\n",
        "      <td> 63.000000</td>\n",
        "      <td> 63.000000</td>\n",
        "      <td> 15</td>\n",
        "      <td> 18.000000</td>\n",
        "      <td> 17.000000</td>\n",
        "      <td> 15.000000</td>\n",
        "      <td> 12.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  1</td>\n",
        "      <td> 107.691176</td>\n",
        "      <td>  1.323529</td>\n",
        "      <td>  0.617647</td>\n",
        "      <td>  259838.235294</td>\n",
        "      <td> 21.661765</td>\n",
        "      <td>  0.514706</td>\n",
        "      <td>  0.828571</td>\n",
        "      <td>  0.220588</td>\n",
        "      <td>  0.264706</td>\n",
        "      <td>  0.250000</td>\n",
        "      <td>  0.238095</td>\n",
        "      <td>  0.190476</td>\n",
        "      <td>  1</td>\n",
        "      <td>  0.555556</td>\n",
        "      <td>  0.588235</td>\n",
        "      <td>  0.333333</td>\n",
        "      <td>  0.833333</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>  0</td>\n",
        "      <td>   4.358068</td>\n",
        "      <td>  0.471301</td>\n",
        "      <td>  0.753686</td>\n",
        "      <td>  341733.797519</td>\n",
        "      <td> 11.497709</td>\n",
        "      <td>  0.503500</td>\n",
        "      <td>  0.382385</td>\n",
        "      <td>  0.417726</td>\n",
        "      <td>  0.444457</td>\n",
        "      <td>  0.436232</td>\n",
        "      <td>  0.429339</td>\n",
        "      <td>  0.395831</td>\n",
        "      <td>  0</td>\n",
        "      <td>  0.511310</td>\n",
        "      <td>  0.507300</td>\n",
        "      <td>  0.487950</td>\n",
        "      <td>  0.389249</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  1</td>\n",
        "      <td> 101.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>   25000.000000</td>\n",
        "      <td>  5.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  1</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  1</td>\n",
        "      <td> 104.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>   80000.000000</td>\n",
        "      <td> 15.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  1</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  1</td>\n",
        "      <td> 107.500000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  150000.000000</td>\n",
        "      <td> 20.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  1</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  1</td>\n",
        "      <td> 111.250000</td>\n",
        "      <td>  2.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  300000.000000</td>\n",
        "      <td> 25.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  0.250000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  0.000000</td>\n",
        "      <td>  1</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>  1</td>\n",
        "      <td> 115.000000</td>\n",
        "      <td>  2.000000</td>\n",
        "      <td>  2.000000</td>\n",
        "      <td> 2000000.000000</td>\n",
        "      <td> 70.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "      <td>  1.000000</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "       Season     Episode  NoEntrepreneurs  TeamMembersGender        MoneyAsk   StakeAsk  DealOffered  Deal accepted (Y/N)  O-Barbara Corcoran  O-Daymond John  O-Robert Herjavec  O-Kevin O'Leary  O-Kevin Harrington  A-Barbara Corcoran  A-Daymond John  A-Robert Herjavec  A- Kevin O-Leary  A- Kevin Harrington\n",
        "count      68   68.000000        68.000000          68.000000       68.000000  68.000000    68.000000            35.000000           68.000000       68.000000          68.000000        63.000000           63.000000                  15       18.000000          17.000000         15.000000            12.000000\n",
        "mean        1  107.691176         1.323529           0.617647   259838.235294  21.661765     0.514706             0.828571            0.220588        0.264706           0.250000         0.238095            0.190476                   1        0.555556           0.588235          0.333333             0.833333\n",
        "std         0    4.358068         0.471301           0.753686   341733.797519  11.497709     0.503500             0.382385            0.417726        0.444457           0.436232         0.429339            0.395831                   0        0.511310           0.507300          0.487950             0.389249\n",
        "min         1  101.000000         1.000000           0.000000    25000.000000   5.000000     0.000000             0.000000            0.000000        0.000000           0.000000         0.000000            0.000000                   1        0.000000           0.000000          0.000000             0.000000\n",
        "25%         1  104.000000         1.000000           0.000000    80000.000000  15.000000     0.000000             1.000000            0.000000        0.000000           0.000000         0.000000            0.000000                   1        0.000000           0.000000          0.000000             1.000000\n",
        "50%         1  107.500000         1.000000           0.000000   150000.000000  20.000000     1.000000             1.000000            0.000000        0.000000           0.000000         0.000000            0.000000                   1        1.000000           1.000000          0.000000             1.000000\n",
        "75%         1  111.250000         2.000000           1.000000   300000.000000  25.000000     1.000000             1.000000            0.000000        1.000000           0.250000         0.000000            0.000000                   1        1.000000           1.000000          1.000000             1.000000\n",
        "max         1  115.000000         2.000000           2.000000  2000000.000000  70.000000     1.000000             1.000000            1.000000        1.000000           1.000000         1.000000            1.000000                   1        1.000000           1.000000          1.000000             1.000000"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Data collection: I am reading episode summaries and manually entering the data.\n",
      "# There are currently 6 seasons of Shark Tank, so this is taking a long time X_X\n",
      "# I have currently entered data for 1 season, and I will be adding more data as I go along.\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "#How many entrepreneurs were there for each genre?\n",
      "\n",
      "groupby_genre = data.groupby('CompanyGenre')\n",
      "\n",
      "print groupby_genre['CompanyGenre'].count()\n",
      "print "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "CompanyGenre\n",
        "Beauty            2\n",
        "Education         2\n",
        "Entertainment     2\n",
        "Fashion           8\n",
        "Fitness           2\n",
        "Food             12\n",
        "Health            2\n",
        "Product          26\n",
        "Service           4\n",
        "Tech              8\n",
        "Name: CompanyGenre, dtype: int64\n",
        "\n"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#How many offers did each shark extend?\n",
      "\n",
      "print data['O-Barbara Corcoran'].sum()\n",
      "print data['O-Daymond John'].sum()\n",
      "print data['O-Robert Herjavec'].sum()\n",
      "print data[\"O-Kevin O'Leary\"].sum()\n",
      "print data['O-Kevin Harrington'].sum()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "15\n",
        "18\n",
        "17\n",
        "15.0\n",
        "12.0\n"
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.scatter(data.MoneyAsk, data.StakeAsk, color='k')\n",
      "plt.xlabel(\"Money asked for\")\n",
      "plt.ylabel(\"Stake asked for\")\n",
      "remove_border()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n5iBiZmaZ/X9E8i+YqfVeVQAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10bb7ea90>"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 41
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "genre_counts = data['CompanyGenre'].value_counts()\n",
      "\n",
      "genre_counts.plot(kind='bar')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 42,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10ca27e50>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\ngg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10ca9e710>"
       ]
      }
     ],
     "prompt_number": 42
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#These are all the companies that received a deal:\n",
      "\n",
      "shark_offer = data['DealOffered'] == 1\n",
      "data[shark_offer][['Episode', 'Company', 'CompanyGenre']]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Episode</th>\n",
        "      <th>Company</th>\n",
        "      <th>CompanyGenre</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0 </th>\n",
        "      <td> 101</td>\n",
        "      <td>                          Mr. Tod's Pie Factory</td>\n",
        "      <td>          Food</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3 </th>\n",
        "      <td> 101</td>\n",
        "      <td>                              Emmy The Elephant</td>\n",
        "      <td>        Health</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4 </th>\n",
        "      <td> 101</td>\n",
        "      <td>                    College Foxes Packing Boxes</td>\n",
        "      <td>       Service</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6 </th>\n",
        "      <td> 102</td>\n",
        "      <td>                                       LifeBelt</td>\n",
        "      <td>          Tech</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7 </th>\n",
        "      <td> 102</td>\n",
        "      <td>        Perfect Pear gourmet food products line</td>\n",
        "      <td>          Food</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9 </th>\n",
        "      <td> 102</td>\n",
        "      <td>                                 Classroom Jams</td>\n",
        "      <td>     Education</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10</th>\n",
        "      <td> 103</td>\n",
        "      <td>                                    Turbobaster</td>\n",
        "      <td>          Food</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12</th>\n",
        "      <td> 103</td>\n",
        "      <td>                         Stress Free Kids books</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14</th>\n",
        "      <td> 103</td>\n",
        "      <td>                          The Voyage Air Guitar</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15</th>\n",
        "      <td> 104</td>\n",
        "      <td>                               Gift Card Rescue</td>\n",
        "      <td>          Tech</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>18</th>\n",
        "      <td> 104</td>\n",
        "      <td>                      Graffiti Removal Services</td>\n",
        "      <td>       Service</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>19</th>\n",
        "      <td> 104</td>\n",
        "      <td>                                      Coverplay</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>20</th>\n",
        "      <td> 105</td>\n",
        "      <td>                                       Body Jac</td>\n",
        "      <td>       Fitness</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>24</th>\n",
        "      <td> 105</td>\n",
        "      <td>                             My Therapy Journal</td>\n",
        "      <td>          Tech</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25</th>\n",
        "      <td> 106</td>\n",
        "      <td>                                   Element Bars</td>\n",
        "      <td>          Food</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>29</th>\n",
        "      <td> 106</td>\n",
        "      <td>                          Pork Barrel BBQ Sauce</td>\n",
        "      <td>          Food</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>30</th>\n",
        "      <td> 107</td>\n",
        "      <td>                                   Grill Charms</td>\n",
        "      <td>          Food</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>33</th>\n",
        "      <td> 107</td>\n",
        "      <td>                                  Soy-Yer-Dough</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>34</th>\n",
        "      <td> 108</td>\n",
        "      <td>                                       Notehall</td>\n",
        "      <td>          Tech</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>35</th>\n",
        "      <td> 108</td>\n",
        "      <td>                            Treasure Chest Pets</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>38</th>\n",
        "      <td> 109</td>\n",
        "      <td>                                     Chill Soda</td>\n",
        "      <td>          Food</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>41</th>\n",
        "      <td> 109</td>\n",
        "      <td>                          Gayla Bentley Fashion</td>\n",
        "      <td>       Fashion</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>43</th>\n",
        "      <td> 110</td>\n",
        "      <td>                                         Qubits</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>46</th>\n",
        "      <td> 110</td>\n",
        "      <td>                                       Nubrella</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>47</th>\n",
        "      <td> 111</td>\n",
        "      <td>                               The Bobble Place</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>49</th>\n",
        "      <td> 111</td>\n",
        "      <td>                                   The URO Club</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50</th>\n",
        "      <td> 111</td>\n",
        "      <td>                                   Jump Forward</td>\n",
        "      <td>          Tech</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>51</th>\n",
        "      <td> 112</td>\n",
        "      <td>                                   Romp N' Roll</td>\n",
        "      <td> Entertainment</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>52</th>\n",
        "      <td> 112</td>\n",
        "      <td>                            Hells Bells Helmets</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>54</th>\n",
        "      <td> 112</td>\n",
        "      <td> Jaden Chinese Salad Dressing and Seasoning Mix</td>\n",
        "      <td>          Food</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>59</th>\n",
        "      <td> 113</td>\n",
        "      <td>                            Grease Monkey Wipes</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>60</th>\n",
        "      <td> 114</td>\n",
        "      <td>                                  LipStix ReMix</td>\n",
        "      <td>        Beauty</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>62</th>\n",
        "      <td> 114</td>\n",
        "      <td>                                 Caffeindicator</td>\n",
        "      <td>          Food</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>64</th>\n",
        "      <td> 115</td>\n",
        "      <td>                                  Fridge Fronts</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>67</th>\n",
        "      <td> 115</td>\n",
        "      <td>                                      Lightfilm</td>\n",
        "      <td>       Product</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 43,
       "text": [
        "    Episode                                         Company   CompanyGenre\n",
        "0       101                           Mr. Tod's Pie Factory           Food\n",
        "3       101                               Emmy The Elephant         Health\n",
        "4       101                     College Foxes Packing Boxes        Service\n",
        "6       102                                        LifeBelt           Tech\n",
        "7       102         Perfect Pear gourmet food products line           Food\n",
        "9       102                                  Classroom Jams      Education\n",
        "10      103                                     Turbobaster           Food\n",
        "12      103                          Stress Free Kids books        Product\n",
        "14      103                           The Voyage Air Guitar        Product\n",
        "15      104                                Gift Card Rescue           Tech\n",
        "18      104                       Graffiti Removal Services        Service\n",
        "19      104                                       Coverplay        Product\n",
        "20      105                                        Body Jac        Fitness\n",
        "24      105                              My Therapy Journal           Tech\n",
        "25      106                                    Element Bars           Food\n",
        "29      106                           Pork Barrel BBQ Sauce           Food\n",
        "30      107                                    Grill Charms           Food\n",
        "33      107                                   Soy-Yer-Dough        Product\n",
        "34      108                                        Notehall           Tech\n",
        "35      108                             Treasure Chest Pets        Product\n",
        "38      109                                      Chill Soda           Food\n",
        "41      109                           Gayla Bentley Fashion        Fashion\n",
        "43      110                                          Qubits        Product\n",
        "46      110                                        Nubrella        Product\n",
        "47      111                                The Bobble Place        Product\n",
        "49      111                                    The URO Club        Product\n",
        "50      111                                    Jump Forward           Tech\n",
        "51      112                                    Romp N' Roll  Entertainment\n",
        "52      112                             Hells Bells Helmets        Product\n",
        "54      112  Jaden Chinese Salad Dressing and Seasoning Mix           Food\n",
        "59      113                             Grease Monkey Wipes        Product\n",
        "60      114                                   LipStix ReMix         Beauty\n",
        "62      114                                  Caffeindicator           Food\n",
        "64      115                                   Fridge Fronts        Product\n",
        "67      115                                       Lightfilm        Product"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#How many shark offers were there in each genre?\n",
      "\n",
      "deals_from_sharks = data[shark_offer]\n",
      "deals_from_sharks['CompanyGenre'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 44,
       "text": [
        "Product          13\n",
        "Food              9\n",
        "Tech              5\n",
        "Service           2\n",
        "Education         1\n",
        "Fitness           1\n",
        "Beauty            1\n",
        "Health            1\n",
        "Fashion           1\n",
        "Entertainment     1\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 44
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#I want to find the mean difference between the stake an entrepreneur originally asks for and one that they accept\n",
      "#only if they accept one\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "from sklearn import preprocessing\n",
      "\n",
      "le = preprocessing.LabelEncoder()\n",
      "data.CompanyGenre = le.fit_transform(data.CompanyGenre)\n",
      "\n",
      "data.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Season</th>\n",
        "      <th>Episode</th>\n",
        "      <th>Company</th>\n",
        "      <th>CompanyGenre</th>\n",
        "      <th>NoEntrepreneurs</th>\n",
        "      <th>TeamMembersGender</th>\n",
        "      <th>MoneyAsk</th>\n",
        "      <th>StakeAsk</th>\n",
        "      <th>DealOffered</th>\n",
        "      <th>Deal accepted (Y/N)</th>\n",
        "      <th>Stake offered/accepted (%)</th>\n",
        "      <th>O-Barbara Corcoran</th>\n",
        "      <th>O-Daymond John</th>\n",
        "      <th>O-Robert Herjavec</th>\n",
        "      <th>O-Kevin O'Leary</th>\n",
        "      <th>O-Kevin Harrington</th>\n",
        "      <th>A-Barbara Corcoran</th>\n",
        "      <th>A-Daymond John</th>\n",
        "      <th>A-Robert Herjavec</th>\n",
        "      <th>A- Kevin O-Leary</th>\n",
        "      <th>A- Kevin Harrington</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td>       Mr. Tod's Pie Factory</td>\n",
        "      <td> 5</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td>  460000</td>\n",
        "      <td> 10</td>\n",
        "      <td> 1</td>\n",
        "      <td>  1</td>\n",
        "      <td>  50</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>  1</td>\n",
        "      <td>  1</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td>               The Ionic Ear</td>\n",
        "      <td> 9</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1000000</td>\n",
        "      <td> 15</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td>                     WiSpots</td>\n",
        "      <td> 9</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1200000</td>\n",
        "      <td> 10</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td>           Emmy The Elephant</td>\n",
        "      <td> 6</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td>   50000</td>\n",
        "      <td> 15</td>\n",
        "      <td> 1</td>\n",
        "      <td>  1</td>\n",
        "      <td>  55</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>  1</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> 1</td>\n",
        "      <td> 101</td>\n",
        "      <td> College Foxes Packing Boxes</td>\n",
        "      <td> 8</td>\n",
        "      <td> 2</td>\n",
        "      <td> 0</td>\n",
        "      <td>  250000</td>\n",
        "      <td> 25</td>\n",
        "      <td> 1</td>\n",
        "      <td>  0</td>\n",
        "      <td>  50</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>  1</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 48,
       "text": [
        "   Season  Episode                      Company  CompanyGenre  NoEntrepreneurs  TeamMembersGender  MoneyAsk  StakeAsk  DealOffered  Deal accepted (Y/N) Stake offered/accepted (%)  O-Barbara Corcoran  O-Daymond John  O-Robert Herjavec  O-Kevin O'Leary  O-Kevin Harrington  A-Barbara Corcoran  A-Daymond John  A-Robert Herjavec  A- Kevin O-Leary  A- Kevin Harrington\n",
        "0       1      101        Mr. Tod's Pie Factory             5                1                  0    460000        10            1                    1                         50                   1               1                  0              NaN                 NaN                   1               1                NaN               NaN                  NaN\n",
        "1       1      101                The Ionic Ear             9                1                  0   1000000        15            0                  NaN                        NaN                   0               0                  0              NaN                 NaN                 NaN             NaN                NaN               NaN                  NaN\n",
        "2       1      101                      WiSpots             9                1                  0   1200000        10            0                  NaN                        NaN                   0               0                  0              NaN                 NaN                 NaN             NaN                NaN               NaN                  NaN\n",
        "3       1      101            Emmy The Elephant             6                1                  1     50000        15            1                    1                         55                   1               0                  0              NaN                 NaN                   1             NaN                NaN               NaN                  NaN\n",
        "4       1      101  College Foxes Packing Boxes             8                2                  0    250000        25            1                    0                         50                   0               0                  1              NaN                 NaN                 NaN             NaN                  1               NaN                  NaN"
       ]
      }
     ],
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Splitting the data into train and test\n",
      "# My target variable will be whether or not the entrepreneurs were offered a deal by the sharks\n",
      "\n",
      "from sklearn.cross_validation import train_test_split\n",
      "\n",
      "X = data[['CompanyGenre', 'NoEntrepreneurs', 'TeamMembersGender', 'MoneyAsk', 'StakeAsk']]\n",
      "y = data['DealOffered']\n",
      "\n",
      "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)\n",
      "\n",
      "train = pd.DataFrame(data=X_train, columns=['CompanyGenre', 'NoEntrepreneurs', 'TeamMembersGender', 'MoneyAsk', 'StakeAsk'])\n",
      "train['DealOffered'] = y_train\n",
      "\n",
      "test = pd.DataFrame(data=X_test, columns=['CompanyGenre', 'NoEntrepreneurs', 'TeamMembersGender', 'MoneyAsk', 'StakeAsk'])\n",
      "test['DealOffered'] = y_test               "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 50
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn.linear_model import LogisticRegression\n",
      "from sklearn import metrics\n",
      "\n",
      "# flatten y into a 1-D array\n",
      "y = np.ravel(y)\n",
      "# make logistic regression model, and fit with X and y\n",
      "model = LogisticRegression()\n",
      "model = model.fit(X, y)\n",
      "\n",
      "# check accuracy on the training set\n",
      "model.score(X, y)\n",
      "\n",
      "# flatten y into a 1-D array\n",
      "y = np.ravel(y)\n",
      "# make logistic regression model, and fit with X and y\n",
      "model = LogisticRegression()\n",
      "model = model.fit(X, y)\n",
      "\n",
      "# check accuracy on the training set\n",
      "model.score(X, y)\n",
      "\n",
      "# flatten y into a 1-D array\n",
      "y = np.ravel(y)\n",
      "# make logistic regression model, and fit with X and y\n",
      "model = LogisticRegression()\n",
      "model = model.fit(X, y)\n",
      "\n",
      "# check accuracy on the training set\n",
      "model.score(X, y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 51,
       "text": [
        "0.48529411764705882"
       ]
      }
     ],
     "prompt_number": 51
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "model2 = model.fit(X_test, y_test)\n",
      "\n",
      "# check accuracy on the training set\n",
      "model2.score(X, y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 54,
       "text": [
        "0.48529411764705882"
       ]
      }
     ],
     "prompt_number": 54
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# predict class labels for the test set\n",
      "predicted = model2.predict(X_test)\n",
      "print predicted\n",
      "\n",
      "# generate class probabilities\n",
      "probs = model2.predict_proba(X_test)\n",
      "print probs\n",
      "\n",
      "# generate evaluation metrics\n",
      "print metrics.accuracy_score(y_test, predicted)\n",
      "#area under curve\n",
      "print metrics.roc_auc_score(y_test, probs[:, 1])\n",
      "\n",
      "# generate evaluation metrics\n",
      "print metrics.accuracy_score(y_test, predicted)\n",
      "#area under curve\n",
      "print metrics.roc_auc_score(y_test, probs[:, 1])\n",
      "\n",
      "# confusion matrix\n",
      "print metrics.confusion_matrix(y_test, predicted)\n",
      "print metrics.classification_report(y_test, predicted)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
        "[[ 0.55057984  0.44942016]\n",
        " [ 0.59403005  0.40596995]\n",
        " [ 0.55267202  0.44732798]\n",
        " [ 0.55267201  0.44732799]\n",
        " [ 0.60418782  0.39581218]\n",
        " [ 0.74218633  0.25781367]\n",
        " [ 0.62917557  0.37082443]\n",
        " [ 0.55789415  0.44210585]\n",
        " [ 0.65349054  0.34650946]\n",
        " [ 0.99378987  0.00621013]\n",
        " [ 0.55267202  0.44732798]\n",
        " [ 0.7805434   0.2194566 ]\n",
        " [ 0.7805434   0.2194566 ]\n",
        " [ 0.65349054  0.34650946]\n",
        " [ 0.7805434   0.2194566 ]\n",
        " [ 0.54219394  0.45780606]\n",
        " [ 0.52640948  0.47359052]\n",
        " [ 0.65349054  0.34650946]\n",
        " [ 0.55267202  0.44732798]\n",
        " [ 0.99824614  0.00175386]\n",
        " [ 0.53167841  0.46832159]]\n",
        "0.666666666667\n",
        "0.658163265306\n",
        "0.666666666667\n",
        "0.658163265306\n",
        "[[14  0]\n",
        " [ 7  0]]\n",
        "             precision    recall  f1-score   support\n",
        "\n",
        "          0       0.67      1.00      0.80        14\n",
        "          1       0.00      0.00      0.00         7\n",
        "\n",
        "avg / total       0.44      0.67      0.53        21\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/Users/kellydavies/anaconda/lib/python2.7/site-packages/sklearn/metrics/metrics.py:1771: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
        "  'precision', 'predicted', average, warn_for)\n"
       ]
      }
     ],
     "prompt_number": 55
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}